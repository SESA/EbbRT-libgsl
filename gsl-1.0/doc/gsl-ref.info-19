This is gsl-ref.info, produced by makeinfo version 4.0 from
gsl-ref.texi.

INFO-DIR-SECTION Scientific software
START-INFO-DIR-ENTRY
* gsl-ref: (gsl-ref).                   GNU Scientific Library - Reference
END-INFO-DIR-ENTRY

   This file documents the GNU Scientific Library.

   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 The GSL Team.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled "GNU Free
Documentation License".


File: gsl-ref.info,  Node: Level 2 CBLAS Functions,  Next: Level 3 CBLAS Functions,  Prev: Level 1 CBLAS Functions,  Up: GSL CBLAS Library

Level 2
=======

 - Function: void cblas_sgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const float
          ALPHA, const float *A, const int LDA, const float *X, const
          int INCX, const float BETA, float *Y, const int INCY)

 - Function: void cblas_sgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const float ALPHA, const float *A, const
          int LDA, const float *X, const int INCX, const float BETA,
          float *Y, const int INCY)

 - Function: void cblas_strmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *A, const int
          LDA, float *X, const int INCX)

 - Function: void cblas_stbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const float
          *A, const int LDA, float *X, const int INCX)

 - Function: void cblas_stpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *AP, float *X,
          const int INCX)

 - Function: void cblas_strsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *A, const int
          LDA, float *X, const int INCX)

 - Function: void cblas_stbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const float
          *A, const int LDA, float *X, const int INCX)

 - Function: void cblas_stpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const float *AP, float *X,
          const int INCX)

 - Function: void cblas_dgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const
          double ALPHA, const double *A, const int LDA, const double
          *X, const int INCX, const double BETA, double *Y, const int
          INCY)

 - Function: void cblas_dgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const double ALPHA, const double *A, const
          int LDA, const double *X, const int INCX, const double BETA,
          double *Y, const int INCY)

 - Function: void cblas_dtrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *A, const int
          LDA, double *X, const int INCX)

 - Function: void cblas_dtbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const double
          *A, const int LDA, double *X, const int INCX)

 - Function: void cblas_dtpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *AP, double
          *X, const int INCX)

 - Function: void cblas_dtrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *A, const int
          LDA, double *X, const int INCX)

 - Function: void cblas_dtbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const double
          *A, const int LDA, double *X, const int INCX)

 - Function: void cblas_dtpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const double *AP, double
          *X, const int INCX)

 - Function: void cblas_cgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const void
          *ALPHA, const void *A, const int LDA, const void *X, const
          int INCX, const void *BETA, void *Y, const int INCY)

 - Function: void cblas_cgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const void *ALPHA, const void *A, const int
          LDA, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_ctrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ctbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ctpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_ctrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ctbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ctpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_zgemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const void
          *ALPHA, const void *A, const int LDA, const void *X, const
          int INCX, const void *BETA, void *Y, const int INCY)

 - Function: void cblas_zgbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const int M, const int N, const int
          KL, const int KU, const void *ALPHA, const void *A, const int
          LDA, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_ztrmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ztbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ztpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_ztrsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *A, const int
          LDA, void *X, const int INCX)

 - Function: void cblas_ztbsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const int K, const void
          *A, const int LDA, void *X, const int INCX)

 - Function: void cblas_ztpsv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANSA, const
          enum CBLAS_DIAG DIAG, const int N, const void *AP, void *X,
          const int INCX)

 - Function: void cblas_ssymv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *A, const int LDA, const float *X, const int INCX, const
          float BETA, float *Y, const int INCY)

 - Function: void cblas_ssbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const float ALPHA,
          const float *A, const int LDA, const float *X, const int
          INCX, const float BETA, float *Y, const int INCY)

 - Function: void cblas_sspmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *AP, const float *X, const int INCX, const float BETA, float
          *Y, const int INCY)

 - Function: void cblas_sger (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const float ALPHA, const float *X, const int
          INCX, const float *Y, const int INCY, float *A, const int LDA)

 - Function: void cblas_ssyr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, float *A, const int LDA)

 - Function: void cblas_sspr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, float *AP)

 - Function: void cblas_ssyr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, const float *Y, const int INCY, float *A,
          const int LDA)

 - Function: void cblas_sspr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const float
          *X, const int INCX, const float *Y, const int INCY, float *A)

 - Function: void cblas_dsymv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *A, const int LDA, const double *X, const int INCX,
          const double BETA, double *Y, const int INCY)

 - Function: void cblas_dsbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const double
          ALPHA, const double *A, const int LDA, const double *X, const
          int INCX, const double BETA, double *Y, const int INCY)

 - Function: void cblas_dspmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *AP, const double *X, const int INCX, const double
          BETA, double *Y, const int INCY)

 - Function: void cblas_dger (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const double ALPHA, const double *X, const
          int INCX, const double *Y, const int INCY, double *A, const
          int LDA)

 - Function: void cblas_dsyr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, double *A, const int LDA)

 - Function: void cblas_dspr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, double *AP)

 - Function: void cblas_dsyr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, const double *Y, const int INCY,
          double *A, const int LDA)

 - Function: void cblas_dspr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const
          double *X, const int INCX, const double *Y, const int INCY,
          double *A)

 - Function: void cblas_chemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *A, const int LDA, const void *X, const int INCX, const void
          *BETA, void *Y, const int INCY)

 - Function: void cblas_chbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *X, const int INCX,
          const void *BETA, void *Y, const int INCY)

 - Function: void cblas_chpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *AP, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_cgeru (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_cgerc (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_cher (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const void
          *X, const int INCX, void *A, const int LDA)

 - Function: void cblas_chpr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const float ALPHA, const void
          *X, const int INCX, void *A)

 - Function: void cblas_cher2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *A,
          const int LDA)

 - Function: void cblas_chpr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *AP)

 - Function: void cblas_zhemv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *A, const int LDA, const void *X, const int INCX, const void
          *BETA, void *Y, const int INCY)

 - Function: void cblas_zhbmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *X, const int INCX,
          const void *BETA, void *Y, const int INCY)

 - Function: void cblas_zhpmv (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *AP, const void *X, const int INCX, const void *BETA, void
          *Y, const int INCY)

 - Function: void cblas_zgeru (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_zgerc (const enum CBLAS_ORDER ORDER, const int
          M, const int N, const void *ALPHA, const void *X, const int
          INCX, const void *Y, const int INCY, void *A, const int LDA)

 - Function: void cblas_zher (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const void
          *X, const int INCX, void *A, const int LDA)

 - Function: void cblas_zhpr (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const double ALPHA, const void
          *X, const int INCX, void *A)

 - Function: void cblas_zher2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *A,
          const int LDA)

 - Function: void cblas_zhpr2 (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const int N, const void *ALPHA, const void
          *X, const int INCX, const void *Y, const int INCY, void *AP)


File: gsl-ref.info,  Node: Level 3 CBLAS Functions,  Next: GSL CBLAS Examples,  Prev: Level 2 CBLAS Functions,  Up: GSL CBLAS Library

Level 3
=======

 - Function: void cblas_sgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const float ALPHA,
          const float *A, const int LDA, const float *B, const int LDB,
          const float BETA, float *C, const int LDC)

 - Function: void cblas_ssymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const float ALPHA, const float *A, const int
          LDA, const float *B, const int LDB, const float BETA, float
          *C, const int LDC)

 - Function: void cblas_ssyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const float ALPHA, const float *A, const int
          LDA, const float BETA, float *C, const int LDC)

 - Function: void cblas_ssyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const float ALPHA, const float *A, const
          int LDA, const float *B, const int LDB, const float BETA,
          float *C, const int LDC)

 - Function: void cblas_strmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const float ALPHA, const float *A, const int
          LDA, float *B, const int LDB)

 - Function: void cblas_strsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const float ALPHA, const float *A, const int
          LDA, float *B, const int LDB)

 - Function: void cblas_dgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const double ALPHA,
          const double *A, const int LDA, const double *B, const int
          LDB, const double BETA, double *C, const int LDC)

 - Function: void cblas_dsymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const double ALPHA, const double *A, const int
          LDA, const double *B, const int LDB, const double BETA,
          double *C, const int LDC)

 - Function: void cblas_dsyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const double ALPHA, const double *A, const
          int LDA, const double BETA, double *C, const int LDC)

 - Function: void cblas_dsyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const double ALPHA, const double *A,
          const int LDA, const double *B, const int LDB, const double
          BETA, double *C, const int LDC)

 - Function: void cblas_dtrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const double ALPHA, const double *A, const
          int LDA, double *B, const int LDB)

 - Function: void cblas_dtrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const double ALPHA, const double *A, const
          int LDA, double *B, const int LDB)

 - Function: void cblas_cgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *B, const int LDB,
          const void *BETA, void *C, const int LDC)

 - Function: void cblas_csymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_csyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const void *ALPHA, const void *A, const int
          LDA, const void *BETA, void *C, const int LDC)

 - Function: void cblas_csyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const void *BETA, void
          *C, const int LDC)

 - Function: void cblas_ctrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_ctrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_zgemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_TRANSPOSE TRANSB,
          const int M, const int N, const int K, const void *ALPHA,
          const void *A, const int LDA, const void *B, const int LDB,
          const void *BETA, void *C, const int LDC)

 - Function: void cblas_zsymm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_zsyrk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const void *ALPHA, const void *A, const int
          LDA, const void *BETA, void *C, const int LDC)

 - Function: void cblas_zsyr2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const void *BETA, void
          *C, const int LDC)

 - Function: void cblas_ztrmm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_ztrsm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const enum
          CBLAS_TRANSPOSE TRANSA, const enum CBLAS_DIAG DIAG, const int
          M, const int N, const void *ALPHA, const void *A, const int
          LDA, void *B, const int LDB)

 - Function: void cblas_chemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_cherk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const float ALPHA, const void *A, const int
          LDA, const float BETA, void *C, const int LDC)

 - Function: void cblas_cher2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const float BETA, void
          *C, const int LDC)

 - Function: void cblas_zhemm (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_SIDE SIDE, const enum CBLAS_UPLO UPLO, const int M,
          const int N, const void *ALPHA, const void *A, const int LDA,
          const void *B, const int LDB, const void *BETA, void *C,
          const int LDC)

 - Function: void cblas_zherk (const enum CBLAS_ORDER ORDER, const enum
          CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const int
          N, const int K, const double ALPHA, const void *A, const int
          LDA, const double BETA, void *C, const int LDC)

 - Function: void cblas_zher2k (const enum CBLAS_ORDER ORDER, const
          enum CBLAS_UPLO UPLO, const enum CBLAS_TRANSPOSE TRANS, const
          int N, const int K, const void *ALPHA, const void *A, const
          int LDA, const void *B, const int LDB, const double BETA,
          void *C, const int LDC)

 - Function: void cblas_xerbla (int P, const char *ROUT, const char
          *FORM, ...)


File: gsl-ref.info,  Node: GSL CBLAS Examples,  Prev: Level 3 CBLAS Functions,  Up: GSL CBLAS Library

Examples
========

   The following program computes the product of two matrices using the
Level-3 BLAS function SGEMM,

     [ 0.11 0.12 0.13 ]  [ 1011 1012 ]     [ 367.76 368.12 ]
     [ 0.21 0.22 0.23 ]  [ 1021 1022 ]  =  [ 674.06 674.72 ]
                         [ 1031 1032 ]

The matrices are stored in row major order but could be stored in column
major order if the first argument of the call to `cblas_sgemm' was
changed to `CblasColMajor'.

     #include <stdio.h>
     #include <gsl/gsl_cblas.h>
     
     int
     main (void)
     {
       int lda = 3;
     
       float A[] = { 0.11, 0.12, 0.13,
                     0.21, 0.22, 0.23 };
     
       int ldb = 2;
     
       float B[] = { 1011, 1012,
                     1021, 1022,
                     1031, 1032 };
     
       int ldc = 2;
     
       float C[] = { 0.00, 0.00,
                     0.00, 0.00 };
     
       /* Compute C = A B */
     
       cblas_sgemm (CblasRowMajor,
                    CblasNoTrans, CblasNoTrans, 2, 2, 3,
                    1.0, A, lda, B, ldb, 0.0, C, ldc);
     
       printf("[ %g, %g\n", C[0], C[1]);
       printf("  %g, %g ]\n", C[2], C[3]);
     
       return 0;
     }

To compile the program use the following command line,

     gcc demo.c -lgslcblas

There is no need to link with the main library `-lgsl' in this case as
the CBLAS library is an independent unit. Here is the output from the
program,
     $ ./a.out
     [ 367.76, 368.12
       674.06, 674.72 ]


File: gsl-ref.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: GSL CBLAS Library,  Up: Top

GNU General Public License
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

Appendix: How to Apply These Terms to Your New Programs
=======================================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YYYY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it
     and/or modify it under the terms of the GNU General Public
     License as published by the Free Software Foundation; either
     version 2 of the License, or (at your option) any later
     version.
     
     This program is distributed in the hope that it will be
     useful, but WITHOUT ANY WARRANTY; without even the implied
     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the GNU General Public License for more
     details.
     
     You should have received a copy of the GNU General Public
     License along with this program; if not, write to the Free
     Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in
     the program `Gnomovision' (which makes passes at compilers)
     written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.

